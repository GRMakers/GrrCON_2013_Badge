#!/usr/bin/python

import serial, sys, glob, binascii, time, platform, struct

# Check to see if we're importing a port directly
if len(sys.argv) >= 2:
    ser = serial.Serial(sys.argv[1])
# Check for Linux
elif (platform.system() == "Linux") :
    for port in glob.glob('/dev/ttyACM*'):
        try:
            ser = serial.Serial(port)
        except Exception:
            pass # Fail
        else:
            break
# Check for Mac
elif (platform.system() == "Darwin") :
    for port in glob.glob('/dev/tty.usbmodem*'):
        try:
            ser = serial.Serial(port)
        except Exception:
            pass # Fail
        else:
            break
# Call it off
else:
    sys.exit("No compatible port was found on your computer.")


# Ask User what they want to do
print " "
print "--------------------------------------------------"
print "   __________     __  ___      __                 "
print "  / ____/ __ \   /  |/  /___ _/ /_____  __________"
print " / / __/ /_/ /  / /|_/ / __ `/ //_/ _ \/ ___/ ___/"
print "/ /_/ / _, _/  / /  / / /_/ / ,< /  __/ /  (__  ) "
print "\____/_/ |_|  /_/  /_/\__,_/_/|_|\___/_/  /____/  "
print " "
print "--------------------------------------------------"
print "BadgeMaker 1.2                  Revised 09-11-2013"
print "--------------------------------------------------"
print " "
print "What would you like to do?"
print " "
print "0 - Change Default Group"
print "1 - Customize The Text"
print "2 - Reset to Default"
print "9 - Exit"
print " "
choice = raw_input("> ")

#
## Change Default Setting
#
if(choice == "0"):
    print " "
    print "Choose a Board Type and enter the corrosponding number below:"
    print " "
    print "0 - Speaker   (RED)"
    print "1 - Staff     (BLUE)"
    print "2 - GrrCon    (BLACK)"
    print "3 - VIP       (YELLOW)"
    print "9 - Exit"
    print " "

    txt = raw_input("> ")

    if (txt == "9"):
        sys.exit()
    else:
        # sleep to make sure the AVR is booted. opening the port reboots.
        print "Updating your GrrCon badge to", txt, ", please wait a few seconds."
        print "#"
        time.sleep(.5);
        print "# Rewriting"
        time.sleep(.5);
        print "#"
        ser.write('aaaaaaaaaa\x01\x01\x01'+txt+txt+txt)
        time.sleep(1);
        print "##################################################"
        print "## Your GrrCON Badge Defaults have been updated. #"
        print "##################################################"
        print " "
        print "Please check your badge to make sure your badge shows the text you chose."
        print " "
#
## Customize the Text
#
elif(choice == "1"):
    print " "
    print "What do you want to write to your GrrCON Badge? (leave blank to reset to default)"
    print " "
    txt = raw_input("> ")

    if (len(txt) != 0) :
        txt = "  " + txt

    crc32 = binascii.crc32(txt) & 0xffffffff

    # Read the string and get the length
    txtlen = len(txt) & 0xFF;

    # Test Struct.Pack
    header = struct.pack(
        '>BIBBBB', 
        txtlen, 
        crc32,
        ((crc32 >> 24) & 0xFF ) ^ txtlen,
        ((crc32 >> 16) & 0xFF ) ^ txtlen,
        ((crc32 >> 8) & 0xFF ) ^ txtlen,
        (crc32 & 0xFF ) ^ txtlen
    )

    print " "
    print "Updating your GrrCON badge....please wait a few seconds."
    print "#"
    time.sleep(.5);
    print "# Rewriting"
    time.sleep(.5);
    print "#"

    # Clear Serial State
    for x in range(0, 10):
        ser.write(' ');

    # Set String Command (Send 3 Ctrl-C)
    for x in range(0, 3):
        ser.write('\x03');

    # Write to the badge
    ser.write(header + txt + " ")

    # Wait to make sure the data made it
    time.sleep(.5);
    print "#############################################"
    print "## Your GrrCON Badge Text has been updated. #"
    print "#############################################"
    print ""
    print "Please check your badge to make sure your badge shows the text you chose."
    print ""
elif(choice == "2"):
    txt = ""

    crc32 = binascii.crc32(txt) & 0xffffffff

    # Read the string and get the length
    txtlen = len(txt) & 0xFF;

    # Test Struct.Pack
    header = struct.pack(
        '>BIBBBB', 
        txtlen, 
        crc32,
        ((crc32 >> 24) & 0xFF ) ^ txtlen,
        ((crc32 >> 16) & 0xFF ) ^ txtlen,
        ((crc32 >> 8) & 0xFF ) ^ txtlen,
        (crc32 & 0xFF ) ^ txtlen
    )

    print " "
    print "Defaulting your GrrCON Badge to factory settings....please wait a few seconds."
    print "#"
    time.sleep(.5);
    print "# Rewriting"
    time.sleep(.5);
    print "#"

    # Clear Serial State
    for x in range(0, 10):
        ser.write(' ');

    # Set String Command (Send 3 Ctrl-C)
    for x in range(0, 3):
        ser.write('\x03');

    # Write to the badge
    ser.write(header + txt + " ")

    # Wait to make sure the data made it
    time.sleep(.5);
    print "#################################################"
    print "## Your GrrCON Badge has been reset to default. #"
    print "#################################################"
    print ""
    print "Please check your badge to make sure your badge shows the text you chose."
    print ""
elif(choice == "9"):
    sys.exit()
else:
    sys.exit("Incorrect or Blank Entry. Please retry")



